reps=c(2) #5
#########################
curr_data <- all_data
curr_data$curr_gap <- curr_data$gap
curr_data$curr_brain  <- curr_data$thirdTR
#for JNeuro, had some boundary convergence:
#curr_data$curr_brain  <- curr_data$scaled_brain_bysubj #that didn't help the int by rep boundary singularity
#curr_data$curr_brain  <- scale(curr_data$thirdTR)
#wa_control_time - within is 2, across is 1
curr_data <- filter(curr_data, curr_data$wa_control_time != 0)
print(sprintf("########### analysis for %s %s #############",roi,subRep1_ttl))
if (subtract_Rep1 == 1) { #remove rep1, and don't run models with interaction by repetition
#if subtract, take it out from the data - it's a bunch of 0
curr_data <- filter(curr_data, curr_data$repetition != 1)
###### models ######
#null_model
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_data,REML=F)
print(sprintf("event_mdl %s",roi))
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#THIS IS IN THE PAPER FOR CA3: event model control for gap: we have different number of items per gap, important to control for that:
null_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + curr_gap + fac_list + (1|subID),curr_data,REML=F)
print(sprintf("event model, controling for gap %s", roi))
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#gap, controling for events: we have different number of items per gap, important to control for that:
null_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + curr_gap + fac_list + (1|subID),curr_data,REML=F)
print(sprintf("gap, controling for event %s", roi))
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#gap and event interaction:
null_mdl=lmer(curr_brain ~ fac_wa_control_time + curr_gap + fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time * curr_gap + fac_list + (1|subID),curr_data,REML=F)
print(sprintf("gap by event interaction %s", roi))
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
# This checks if overall the within is higher than 0 (in CA3), or the across is lower. not reported.
#only WITHIN - all gaps
# curr_onlyWithOrAc_data <- filter(curr_data , curr_data$wa_control_time  == 2)
# null_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_onlyWithOrAc_data,REML=F)
# print(sprintf("only WITHIN, check the intercept %s",roi))
# print(summary(null_mdl))
#
# #only ACROSS - all gaps
# curr_onlyWithOrAc_data <- filter(curr_data , curr_data$wa_control_time  == 1)
# null_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_onlyWithOrAc_data,REML=F)
# print(sprintf("only ACROSS, check the intercept  %s",roi))
# print(summary(null_mdl))
if (analyze_gap == 1) {
onlyWithOrAc_data <- filter(curr_data , curr_data$wa_control_time  == 2)
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),onlyWithOrAc_data,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),onlyWithOrAc_data,REML=F)
print(sprintf("only WITHIN, main effect of gap, %s", roi))
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
onlyWithOrAc_data <- filter(curr_data , curr_data$wa_control_time  == 1)
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),onlyWithOrAc_data,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),onlyWithOrAc_data,REML=F)
print(sprintf("only ACROSS, main effect of gap, %s", roi))
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
}
} else { #did not subtract rep1 - run interaction by repetition
#event by repetition
#that's reported for CA3:
print(sprintf("event by repetition interaction, gap in the model %s", roi))
null_mdl=lmer(curr_brain ~ fac_wa_control_time + repetition + curr_gap + fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time*repetition + curr_gap + fac_list + (1|subID),curr_data,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
print(summary(full_mdl))
#For CA3, had boundary convergence ran these,and the ANOVA below:
#diff_optims <- allFit(full_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(full_mdl)
#gap by repetition
#that's reported for CA1:
print(sprintf("gap by repetition interaction,event in the model %s", roi))
null_mdl=lmer(curr_brain ~ fac_wa_control_time + repetition + curr_gap + fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + repetition * curr_gap + fac_list + (1|subID),curr_data,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
print(summary(full_mdl))
#For CA3, had boundary convergence ran these, and the ANOVA below:
#diff_optims <- allFit(full_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(full_mdl)
#event_mdl_control time by temporal gap by repetition - within is 2, across is 1
#that's reported for DG:
print(sprintf("gap by event by repetition interaction %s", roi))
null_mdl=lmer(curr_brain ~ fac_wa_control_time*curr_gap+curr_gap*repetition + fac_wa_control_time*repetition + fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time*curr_gap*repetition + fac_list + (1|subID),curr_data,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
print(summary(full_mdl))
#For CA3, had boundary convergence ran these:
#diff_optims <- allFit(full_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(full_mdl)
print(sprintf("gap by event by repetition interaction ANOVA %s", roi))
curr_data_average <- curr_data %>%
group_by(subID,fac_wa_control_time,curr_gap,repetition) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
print(summary(aov(curr_brain ~ fac_wa_control_time*curr_gap*repetition + Error(subID/fac_wa_control_time*curr_gap*repetition), data = curr_data_average)))
} #close the Rep1 if
if (subtract_Rep1 == 1) { #remove rep1, can analyze each rep separately
for ( r in reps) {
print(sprintf("################# rep %d ####################",r))
curr_rep_data <- filter(curr_data,curr_data$repetition == r)
print(sprintf("REP %d: event_mdl %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_rep_data,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#event model control for gap: we have different number of items per gap, important to control for that: *this is reported for CA3*
print(sprintf("REP %d: event_mdl controling for gap %s",r, roi))
null_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_rep_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + curr_gap + fac_list + (1|subID),curr_rep_data,REML=F)
print(summary(full_mdl))
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 in CA3, had convergence issues, ran these:
diff_optims <- allFit(full_mdl, maxfun = 1e5)
new_full_mdl <- reach_convergence(full_mdl)
print(sprintf("event t-test %s", roi))
curr_data_average <- curr_rep_data %>%
group_by(subID,fac_wa_control_time) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
res_t <- t.test(curr_brain ~ fac_wa_control_time, data = curr_data_average, paired = TRUE)
print(res_t)
#gap, controling for events: we have different number of items per gap, important to control for that:
print(sprintf("REP %d: gap, controling for event %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_rep_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + curr_gap + fac_list + (1|subID),curr_rep_data,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#gap and event interaction:
print(sprintf("REP %d: gap by event interaction %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_wa_control_time + curr_gap + fac_list + (1|subID),curr_rep_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time * curr_gap + fac_list + (1|subID),curr_rep_data,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 and rep5 in DG, had boundary singlar fit, ran these:
print(summary(full_mdl))
#diff_optims <- allFit(full_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(full_mdl)
print(sprintf("REP %d: gap by event interaction %s ANOVA",r, roi))
curr_data_average <- curr_rep_data %>%
group_by(subID,fac_wa_control_time,curr_gap) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
print(summary(aov(curr_brain ~ fac_wa_control_time*curr_gap + Error(subID/fac_wa_control_time*curr_gap), data = curr_data_average)))
if (analyze_gap == 1) {
#only WITHIN - all gaps
curr_rep_onlyWithOrAc_data <- filter(curr_rep_data , curr_rep_data$wa_control_time  == 2)
print(sprintf("only WITHIN, main effect of gap, rep %d, %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_onlyWithOrAc_data,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_rep_onlyWithOrAc_data,REML=F)
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 and rep5 in DG, had boundary singlar fit, ran these:
print(summary(gap_mdl))
#diff_optims <- allFit(gap_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(gap_mdl)
print(sprintf("only WITHIN, main effect of gap, rep %d, %s ANOVA",r, roi))
curr_data_average <- curr_rep_onlyWithOrAc_data %>%
group_by(subID,curr_gap) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
print(summary(aov(curr_brain ~ curr_gap + Error(subID/curr_gap), data = curr_data_average)))
#only within - gaps 1-2
curr_rep_selgap <- filter(curr_rep_onlyWithOrAc_data ,
curr_rep_onlyWithOrAc_data$gap  < 3)
print(sprintf("only WITHIN, gap 1-2, rep %d,  %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_selgap,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_rep_selgap,REML=F)
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 and rep5 in DG, had boundary singlar fit, ran these:
print(summary(gap_mdl))
#diff_optims <- allFit(gap_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(gap_mdl)
#t-test:
print("only WITHIN, gap 1-2, t-test")
curr_data_average <- curr_rep_selgap %>%
group_by(subID,curr_gap) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
res_t <- t.test(curr_brain ~ curr_gap, data = curr_data_average, paired = TRUE)
print(res_t)
#only within - gaps 1-3
curr_rep_selgap <- filter(curr_rep_onlyWithOrAc_data ,
curr_rep_onlyWithOrAc_data$gap  != 2)
print(sprintf("only WITHIN, gap 1-3, rep %d,  %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_selgap,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_rep_selgap,REML=F)
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 and rep5 in DG these models were fine.
print(summary(gap_mdl))
#diff_optims <- allFit(gap_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(gap_mdl)
#only ACROSS - all gaps
curr_rep_onlyWithOrAc_data <- filter(curr_rep_data , curr_rep_data$wa_control_time  == 1)
print(sprintf("only ACROSS, main effect of gap, rep %d, %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_onlyWithOrAc_data,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_rep_onlyWithOrAc_data,REML=F)
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 and rep5 in DG, had boundary singlar fit, ran these:
print(summary(gap_mdl))
#diff_optims <- allFit(gap_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(gap_mdl)
print(sprintf("only ACROSS, main effect of gap, rep %d, %s ANOVA",r, roi))
curr_data_average <- curr_rep_onlyWithOrAc_data %>%
group_by(subID,curr_gap) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
print(summary(aov(curr_brain ~ curr_gap + Error(subID/curr_gap), data = curr_data_average)))
#only ACROSS - gaps 1-2
curr_rep_selgap <- filter(curr_rep_onlyWithOrAc_data ,
curr_rep_onlyWithOrAc_data$gap  < 3)
print(sprintf("only ACROSS, gap 1-2, rep %d,  %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_selgap,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_rep_selgap,REML=F)
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 and rep5 in DG, had boundary singlar fit, ran these:
print(summary(gap_mdl))
#diff_optims <- allFit(gap_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(gap_mdl)
#t-test:
print("only ACROSS, gap 1-2, t-test")
curr_data_average <- curr_rep_selgap %>%
group_by(subID,curr_gap) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
res_t <- t.test(curr_brain ~ curr_gap, data = curr_data_average, paired = TRUE)
print(res_t)
#only ACROSS - gaps 1-3
curr_rep_selgap <- filter(curr_rep_onlyWithOrAc_data ,
curr_rep_onlyWithOrAc_data$gap  != 2)
print(sprintf("only ACROSS, gap 1-3, rep %d,  %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_selgap,REML=F)
gap_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_rep_selgap,REML=F)
print(anova(gap_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(gap_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#For rep2 and rep5 in DG, these were fine.
print(summary(gap_mdl))
#diff_optims <- allFit(gap_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(gap_mdl)
#for JNeuro: compare gap of 1/2/3, within vs. across:
#all_gaps <- c(1,2,3)
#for (curr_gap in all_gaps) {
curr_rep_curr_gap <- filter(curr_rep_data , curr_rep_data$gap == 1)
#print(nrow(curr_rep_curr_gap))
print(sprintf(" gap 1: compare within vs. across, rep %d,  %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_curr_gap,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_rep_curr_gap,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
print(summary(full_mdl))
#diff_optims <- allFit(full_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(full_mdl)
#t-test:
print("gap 1: compare within vs. across, t-test")
curr_data_average <- curr_rep_curr_gap %>%
group_by(subID,fac_wa_control_time) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
res_t <- t.test(curr_brain ~ fac_wa_control_time, data = curr_data_average, paired = TRUE)
print(res_t)
curr_rep_curr_gap <- filter(curr_rep_data , curr_rep_data$gap == 2)
#print(nrow(curr_rep_curr_gap))
print(sprintf(" gap 2: compare within vs. across, rep %d,  %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_curr_gap,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_rep_curr_gap,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
print(summary(full_mdl))
#diff_optims <- allFit(full_mdl, maxfun = 1e5)
#new_full_mdl <- reach_convergence(full_mdl)
#t-test:
print("gap 2: compare within vs. across, t-test")
curr_data_average <- curr_rep_curr_gap %>%
group_by(subID,fac_wa_control_time) %>%
summarize(curr_brain = mean(curr_brain, na.rm = TRUE))
res_t <- t.test(curr_brain ~ fac_wa_control_time, data = curr_data_average, paired = TRUE)
print(res_t)
curr_rep_curr_gap <- filter(curr_rep_data , curr_rep_data$gap == 3)
#print(nrow(curr_rep_curr_gap))
print(sprintf(" gap 3: compare within vs. across, rep %d,  %s",r, roi))
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_rep_curr_gap,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_rep_curr_gap,REML=F)
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
print(summary(full_mdl))
diff_optims <- allFit(full_mdl, maxfun = 1e5)
new_full_mdl <- reach_convergence(full_mdl)
#}
} #end the analyse_gap
} #end the repetition
} #ends the subtract rep1
# clear workspace
rm(list = ls())
#data
model='filtered100s_mtc_clean_mc_wmcsf_3sphere'
#results_dir <- sprintf("/Volumes/data/Bein/Repatime/repatime_scanner/results/encoding/rsa/no_smooth/%s/voxel_removed/FilesForR_outlier_corr_removed",model)
results_dir <- sprintf("/Users/oded/princeton_gdrive/DAVACHI_LAB/Repatime/Rfiles_data_for_JNeuro")
knitr::opts_knit$set(root.dir = results_dir)
library(tidyverse)
library(Matrix)
library(lme4)
library(lmerTest)
library(effsize)
library(ggplot2)
library(knitr)
library(reshape)
library(standardize)
library(optimx)
library(ggpubr)
library(gridExtra) #that's for the grid.arrange
#these we need for plotting models predictions
library(ggeffects)
library(sjPlot)
library(sjmisc)
library(sjstats)
#Create a custom color scale
library(RColorBrewer)
#to view the paletts:
#display.brewer.all(5)
#repetition colors - adapted:
repetition_colors <- c(rgb(1,	0.807843137254902,	0.823529411764706),
rgb(0.886274509803922,	0.305882352941177,	0.320588235294118),
rgb(0.772549019607843,	0.203921568627451,	0.217647058823529),
rgb(0.658823529411765,	0.101960784313725,	0.114705882352941),
rgb(0.35098039215686,	0,	0.0057647058823529))
#names(repetition_colors) <- unique(curr_data$repetition)
############# set up themes:
theme_gap <- theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 18),
strip.text = element_text(size = 14),
title = element_text(size = 18),
legend.text = element_text(size = 14))
theme_all_gaps <- theme_classic() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 26),
axis.text.x = element_text(size = 14),
axis.title.y = element_text(size = 26),
strip.text = element_text(size = 18),
title = element_text(size = 22),
legend.text = element_text(size = 18),
legend.title = element_blank(),
legend.position = c(0.8, 0.2),
legend.background = element_rect(fill= rgb(0.9,0.9,0.9)))
theme_TestRTcorr <- theme_classic() +
theme(axis.title.x = element_text(size = 20),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
strip.text = element_text(size = 16),
title = element_text(size = 20),
plot.title = element_text(hjust = 0.5))
setwd(results_dir)
model_encRT_data <- read.table(paste(results_dir, "behavior_models", "model_and_encoding_RTms.txt", sep="/"),header = TRUE,sep = "\t",dec = ".")
model_TempTestRT_data <- read.table(paste(results_dir, "behavior_models", "model_and_TemporalTest_quick100ms_RTms.txt", sep="/"),header = TRUE,sep = "\t",dec = ".")
model_TempTestRT_data5reps = model_TempTestRT_data[FALSE,FALSE]
#the file for Temporal test didn't include 5 reps. But, if we want to choose items from encoding RSA based on temporal_test, we need it:
#set up the temporal test, but multiply to 5 reps:
for (l in 1:6) {
#print(sprintf("analysis for %s:",curr_roi))
#curr_data <- model_TempTestRT_data %>% filter(list == l) #%>%
model_TempTestRT_data5reps <- bind_rows(model_TempTestRT_data5reps , replicate(5, filter(model_TempTestRT_data, list == l), simplify = FALSE))
}
#now add the repetition
model_TempTestRT_data5reps <- mutate(model_TempTestRT_data5reps, repetition=model_encRT_data$repetition)
#load simMAT and factorise:
model_simMAT <- read.table(paste(results_dir, "behavior_models", "encoding_model_for_simMat.txt", sep="/"),header = TRUE,sep = "\t",dec = ".")
model_simMAT <- model_simMAT %>%
mutate(fac_list = factor(model_simMAT$list),
subID = factor(model_simMAT$subject),
fac_rep = factor(model_simMAT$repetition), #,
fac_event_mdl = factor(model_simMAT$event_model),
fac_wa_control_time = factor(model_simMAT$wa_control_time),
fac_color_mdl = factor(model_simMAT$color_model),
fac_event_pos_item1 = factor(model_simMAT$event_pos_item1),
fac_event_pos_item2 = factor(model_simMAT$event_pos_item2),
position_code = factor(fac_event_pos_item1==fac_event_pos_item2),
boundary_effect = ifelse(model_simMAT$event_pos_item1 == 1, 1,0))
#set up:
subtract_Rep1 <- 1
analysis_reg = "hipp"
reg=1
#lca23_025: 13
#ldg_025: 16
#lca1_025: 11
#rca1_025: 21
model= 'filtered100s_mtc_clean_mc_wmcsf_3sphere'
#results_dir <- sprintf("/Volumes/data/Bein/Repatime/repatime_scanner/results/encoding/rsa/no_smooth/%s/voxel_removed/FilesForR_outlier_corr_removed",model)
#subtract tep1 or not
if (subtract_Rep1 == 1) {
allfiles <- list.files(path = paste(results_dir, "/results/encoding/rsa/regions_data", sep="/"), pattern = sprintf("%s*",analysis_reg), all.files = FALSE, full.names = TRUE, recursive = FALSE)
#set up the title
subRep1_ttl <- 'minus Rep1'
} else {
#this is without subtracting the first rep:
allfiles <- list.files(path = paste(results_dir, "/results/encoding/rsa/regions_data_noRep1Subtraction", sep="/"), pattern = sprintf("%s*",analysis_reg), all.files = FALSE, full.names = TRUE, recursive = FALSE)
#set up the title
subRep1_ttl <- ''
}
#take only simMAT:
#curr_all_files=allfiles[seq(3,length(allfiles), by = 4)]
curr_file=allfiles[reg]
fname = basename(curr_file)
#get the roi:
roi=substr(fname,6,regexpr('_simMat', fname)-1) #get the roi name
#get the data
brain_data <- read.table(curr_file, header = TRUE,sep = "\t",dec = ".")
curr_data <- bind_cols(model_simMAT, brain_data)
#remove NA:
curr_data <- filter(curr_data, !is.na(curr_data$thirdTR))
#scale brain data within subject:
curr_data <- curr_data %>%
mutate(scaled_brain_bysubj = scale_by(curr_data$thirdTR ~ subID))
#save a copy:
all_data <- curr_data #just to keep some copy of that, in case we mess up with things later on
#plot the correlations:
b1 <- ggplot(all_data, aes(x=all_data$thirdTR)) +
geom_histogram() +
theme_bw() +
labs(y = 'similarity', title ='all values')
curr_data <- filter(all_data, all_data$wa_control_time != 0)
#plot the correlations:
b2 <- ggplot(curr_data, aes(x=curr_data$thirdTR)) +
geom_histogram() +
theme_bw() +
labs(y = 'similarity', title ='control gap values')
grid.arrange(b1, b2,ncol=2)
print(sprintf("roi is %s, %s",roi, model))
# This part I did based on what is reported in the paper - for additional analyses, see the block above of the analysis w/o controling for univariate activation
#for dg we did more gap analyses, not needed for CA3:
analyze_gap <- 0
reps=c(5)
#########################
curr_data <- all_data
curr_data$curr_gap <- curr_data$gap
curr_data$curr_brain  <- curr_data$thirdTR
#if want to exclude rep1
#curr_data <- filter(curr_data, curr_data$repetition != 1)
###### models ######
print(sprintf("########### analysis for %s %s #############",roi,subRep1_ttl))
#wa_control_time - within is 2, across is 1
curr_data <- filter(curr_data, curr_data$wa_control_time != 0)
#null_model
null_mdl=lmer(curr_brain ~ fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + fac_list + (1|subID),curr_data,REML=F)
print(sprintf("event_mdl %s",roi))
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#event model control for gap: we have different number of items per gap, important to control for that:
#that's reported for CA3, as the main effect of within vs. across, all reps:
null_mdl=lmer(curr_brain ~ curr_gap + fac_list + (1|subID),curr_data,REML=F)
full_mdl=lmer(curr_brain ~ fac_wa_control_time + curr_gap + fac_list + (1|subID),curr_data,REML=F)
print(sprintf("event model, controling for gap %s", roi))
print(anova(full_mdl,null_mdl))
AIC_diff <- (extractAIC(null_mdl)[2] - extractAIC(full_mdl)[2])
print(sprintf("AIC diff: %.2f",AIC_diff))
print("")
#Same, controlling for univar - the difference from rep1 :
null_mdl=lmer(curr_brain ~ curr_gap + fac_list + act_item1_repX_min_rep1*act_item2_repX_min_rep1 + (1|subID),curr_data,REML=F)
